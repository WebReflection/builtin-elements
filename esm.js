/*! (c) Andrea Giammarchi - ISC */
const e="querySelectorAll",t={A:"Anchor",Caption:"TableCaption",DL:"DList",Dir:"Directory",Img:"Image",OL:"OList",P:"Paragraph",TR:"TableRow",UL:"UList",Article:"",Aside:"",Footer:"",Header:"",Main:"",Nav:"",Element:"",H1:"Heading",H2:"Heading",H3:"Heading",H4:"Heading",H5:"Heading",H6:"Heading",TD:"TableCell",TH:"TableCell",TBody:"TableSection",TFoot:"TableSection",THead:"TableSection"},{setPrototypeOf:a}=Object,n=new WeakSet,o=new WeakSet,l=new Set,r=(e,t)=>document.createElementNS(t?"http://www.w3.org/2000/svg":"",e),c=new MutationObserver((e=>{for(let t=0;t<e.length;t++){const{target:a,attributeName:o,oldValue:l}=e[t];n.has(a)&&a.attributeChangedCallback(o,l,a.getAttribute(o))}})),d=e=>{l.has(e.constructor)||(n.delete(e),o.delete(e),"downgradedCallback"in e&&e.downgradedCallback(),a(e,r(e.tagName,"ownerSVGElement"in e).constructor.prototype))},i=(e,t)=>{if(!(e instanceof t)){d(e),a(e,t.prototype),"upgradedCallback"in e&&e.upgradedCallback();const{observedAttributes:l}=t;if(l&&"attributeChangedCallback"in e){n.add(e),c.observe(e,{attributeFilter:l,attributeOldValue:!0,attributes:!0});for(let t=0;t<l.length;t++){const a=l[t],n=e.getAttribute(a);null!=n&&e.attributeChangedCallback(a,null,n)}}("connectedCallback"in e||"disconnectedCallback"in e)&&(o.add(e),e.isConnected&&"connectedCallback"in e&&e.connectedCallback())}return e},s=e=>e.toLowerCase(),b=(e,t,n)=>new Proxy(new Map,{get(o,l){if(!o.has(l)){function c(){return i(r(d,n),this.constructor)}const d=e(l),s=self[t(l)];o.set(l,a(c,s)),c.prototype=s.prototype}return o.get(l)}}),u=b(s,(e=>"HTML"+(t[e]||"")+"Element"),!1),g=b((e=>e.replace(/^([A-Z]+?)([A-Z][a-z])/,((e,t,a)=>s(t)+a))),(e=>"SVG"+("Element"===e?"":e)+"Element"),!0),C=((t,a=document,n=MutationObserver)=>{const o=(a,n,l,r,c)=>{for(const d of a)(c||e in d)&&(r?n.has(d)||(n.add(d),l.delete(d),t(d,r)):l.has(d)||(l.add(d),n.delete(d),t(d,r)),c||o(d[e]("*"),n,l,r,true))},l=new n((e=>{const t=new Set,a=new Set;for(const{addedNodes:n,removedNodes:l}of e)o(l,t,a,false,false),o(n,t,a,true,false)})),{observe:r}=l;return(l.observe=e=>r.call(l,e,{subtree:true,childList:true}))(a),l})(((e,t)=>{if(o.has(e)){const a=t?"connectedCallback":"disconnectedCallback";a in e&&e[a]()}}));export{u as HTML,g as SVG,d as downgrade,C as observer,i as upgrade};
